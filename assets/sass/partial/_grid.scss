/**
 * Flexbones Grid System
 * 
 * Version 1.1
 * Author: Rory Ashford
 */


/**
 * Clearfix mixin
 *
 * Used to clea1r the floats within each grid
 */
@mixin clearfix() {
    *zoom:1;
    &:before, &:after {
        content:"";
        display:table;
    }
    &:after { clear:both; }
}


/**
 *Column Width
 * 
 * Works out the percent width of columns
 * (gutters can be any unit but columns are always percent bases)
 */
@function column-width($number-of-columns,$total-columns) {
    $single-col-width: 100 / $total-columns * 1%;
    @return $single-col-width * $number-of-columns;
}


/**
 * At Breakpoint
 * 
 * a mixin for outputting inline media queries
 * Just supply a Sass list as an argument with a min/max
 * If there are no min and max values supplied then it 
 * doesnt ouput a media query
 */
@mixin at-breakpoint($min,$max:null){
    @if($max == null and $min != null){
        @media (min-width: $min){
            @content;
        }
    } @elseif($min == null and $max == null) {
        @content;
    } @else{
         @media (min-width: $min) and (max-width: $max){
            @content;
        }
    }
}


/**
 * Span Columns
 * Used to set grids semantically from within 
 * the stylesheet with no additional HTML markup
 */
@mixin span-columns($columns, $total-columns){
    width: column-width($columns,$total-columns);
    padding-left: $gutter-width;
}


/**
 * Grid wrapper
 *
 * This needs revising and combining with .wrapper
 */
@mixin grid-wrapper($gutter){
    .grid{
        @include clearfix();
        margin-left: -$gutter;
    }
}


/**
 * Grid with no gutters
 */
@mixin grid-wrapper-full(){
    .grid--full{
        margin-left: 0;

        > [class^="#{$column-class}"]{
            padding-left: 0;
        }
    }
}


/**
 * Grid Margins
 * 
 * Float all items beginning with the grid prefix
 * Adds  negative padding to each row
 * e.g. 'span--'
 */
@mixin grid-margins($gutter,$prefix,$float:true){
    [class^="#{$prefix}"]{
        position: relative;
        @if($float == true){
           float: left; 
        }
        
        padding-left: $gutter;
    }   
}


/**
 * Equivalent Fractions
 *
 * This function will add additional classes
 * to make the grid system more expressive.
 * Instead of writing 3/12 you can also write 1/4
 * with this function
 */
@function equivalent-fractions($numerator,$denominator){
    $fractions: ();
    @for $i from -$numerator through -1{
        @if($numerator % abs($i) == 0 and $denominator % abs($i) == 0){
            $fractions: map-merge($fractions, abs($i) #{$numerator/abs($i)}-#{$denominator/abs($i)});
        }     
    }
    // return map of all fractions
    @return $fractions;
}


/**
 * Grid Columns
 * 
 * Set the grid column widths based on the number of 
 * columns divided by the total number of columns.
 */
@mixin grid-columns($prefix: null, $suffix: null, $columns: null){
    @for $i from 1 through $columns - 1{
        $css-classes: equivalent-fractions($i,$columns);
        $column-class: null;
        
        @each $css-class in $css-classes{
            $column-class: $column-class, 
            #{ $prefix }#{ value( $css-class ) }#{ $suffix };
        }
        
        #{$column-class}{
            width: column-width($i,$columns);
        }
    }
}


/**
 * Push Class
 *
 * Set the push classes that will incrementally indent
 * the column by a maximum number of total-columns -1
 */

@mixin grid-push($prefix: null, $suffix: null, $columns: null){
    @for $i from 1 through $columns - 1{
        $css-classes: equivalent-fractions($i,$columns);
        $push-class: null;
        
        @each $css-class in $css-classes{
            $push-class: $push-class, 
            #{ $prefix }#{ value($css-class) }#{ $suffix };
        }
        
        #{$push-class}{
            width: column-width($i,$columns);
        }
    }
}


/**
* Omega class
*
* An omega declaration that is breakpoint specific
* Basically it floats an element to the right taking
* it out of order potentially.
*/
@mixin grid-omega($prefix: null, $suffix: null){
    #{$prefix}omega#{$suffix} {
        float: right;
    }
}

   
/**
 * Debug 
 * 
 * Outputs the current breakpoint name to quickly debug 
 * each breakpoint.
 */
@mixin grid-debug($breakpoint-name,$debug-bg: #000){
    body:after{
        position: fixed;
        display: block;
        bottom: 10px;
        right: 10px;
        padding: 5px 20px;
        font-size: 14px;
        font-weight: bold;
        color: white;
        background: $debug-bg;
        content: "#{$breakpoint-name}";
    }
}


/**
 * Grid Generate
 *
 * Pulls the whole thing together ready for output
 * kept seperate from grid-generate as it is DRYer 
 * this way.
 */
@mixin grid-generate($grid-args){

    // This solution will ONLY work with libsass and 
    // sass-list-maps polyfill, will add code for 
    // sass3.3+ support later

    $grids: map-get-z($grid-args, grids);

    $column-name: map-get-z($grid-args, config, columnclass);
    $column-prefix: #{'.' + $column-name};
    $push-prefix: #{'.' + map-get-z($grid-args, config, pushclass)};

    $debug-display: map-get-z($grid-args, config, debug);

    @each $grid in $grids{
        $columns:       map-get(value($grid),columns);
        $suffix:        map-get(value($grid),suffix);
        $breakpoint:    map-get(value($grid),breakpoint);
        $gutter:        map-get(value($grid),gutter);

        // Debug info
        $debug-bg:      map-get-z(value($grid),debug,background);
        $debug-name:    map-get-z(value($grid),debug,name);

        // Include the necessary mixins to generate the grids
        
        /**
         * #{$columns} column grid at #{$debug-name} breakpoint
         */

        @include at-breakpoint($breakpoint){
            @include grid-wrapper($gutter);
            @if($breakpoint != null){
                @include grid-margins($gutter,$column-name,true);
            }@else{
                @include grid-margins($gutter,$column-name,false);
            }
           
            
            @include grid-columns($column-prefix,$suffix,$columns);
            @include grid-push($push-prefix, $suffix, $columns);
            @include grid-omega($column-prefix, $suffix);
            @if( $debug-display == true ){ 
                @include grid-debug($debug-name,$debug-bg) 
            }    
        }    
    }
}