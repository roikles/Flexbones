/**
 * Flexbones Grid System
 * Version 1.1
 */


/**
 * Set default classes (SHOULD BE IN GRID-SETUP)
 */
$column_class:  'span' !default;
$push_class:    'push' !default;


/**
 * Works out the percent width of columns
 * (gutters can be any unit but columns are always percent bases)
 */
@function column_width($number_of_columns,$total_columns) {
    
    $single_col_width: 100 / $total_columns * 1%;
    @return $single_col_width * $number_of_columns;

}


/**
 * Gutter Width
 * Sets gutter width to 0 if not set.
 */
@function gutter_width(){

    @if($gutter_width != null){
        @return $gutter_width;
    } @else {
        @return 0;
    }   
}


/**
 * at-breakpoint
 * a mixin for outputting inline media queries
 * Just supply a Sass list as an argument with a min/max
 */
@mixin at-breakpoint($min,$max:null){
    @if($max == null){
        @media (min-width: $min){
            @content;
        }
    } @else {   
        @media (min-width: $min) and (max-width: $max){
            @content;
        }
    }
}


/**
 * Span Columns
 * Used to set grids semantically from within 
 * the stylesheet with no additional HTML markup
 */
@mixin span-columns($columns, $total_columns){
    width: column_width($columns,$total_columns);
    padding-left: $gutter_width;
}


/**
 * Grid wrapper
 */
@mixin grid_wrapper($gutter){
    .grid{
        *zoom:1;
        &:before, &:after {
            content:"";
            display:table;
        }
        &:after { clear:both; }
        
        margin-left: -$gutter;
    }
}


/**
 * Grid with no gutters
 */
@mixin grid_wrapper_full(){
    .grid--full{
        margin-left: 0;

        > [class^="#{$column_class}"]{
            padding-left: 0;
        }
    }
}


/**
 * Float all items beginning with the grid prefix
 * e.g. 'span--'
 */
@mixin grid_margins($gutter){
    [class^="#{$column_class}"]{
        position: relative;
        float: left;
        padding-left: $gutter;
    }   
}


/**
 * New grid columns
 * requires prefix, breakpoint, grid options (including number of columns)
 */
@mixin grid_columns($prefix: null, $suffix: null, $breakpoint: null, $columns: null){

    @for $i from 1 through $columns{
        #{$prefix}#{$i}-#{$columns}#{$suffix}{
            width: column_width($i,$columns);
        }
    }
}


/**
 * Push class
 */
@mixin grid_push($prefix: null, $suffix: null, $breakpoint: null, $columns: null){

    @for $i from 1 through $columns - 1{
        #{$prefix}#{$i}-#{$columns}#{$suffix}{
            width: column_width($i,$columns);
        }
    }
}


/**
* Omega class
*/
@mixin grid_omega($prefix: null, $suffix: null){
    #{$prefix}omega#{$suffix} {
        float: right;
    }
}

   
/**
 * Debug 
 * Outputs the current breakpoint name to quickly debug each breakpoint.
 */
@mixin debug_grid($breakpoint_name,$debug_bg: #000){
    body:after{
        position: fixed;
        display: block;
        bottom: 10px;
        right: 10px;
        padding: 5px 20px;
        font-size: 14px;
        font-weight: bold;
        color: white;
        background: $debug_bg;
        content: "#{$breakpoint_name}";
    }
}


/**
 * Generate grid
 * pulls together the grid wrapper, columns and gutter settings
 * call once per required breakpoint
 */
@mixin generate_grid($grid_args){
    
    @each $grid in $grid_args{
        $columns:       map-get-z($grid,options,columns);
        $suffix:        map-get-z($grid,options,suffix);
        $breakpoint:    map-get-z($grid,options,breakpoint);
        $gutter:        map-get-z($grid,options,gutter);
        $debug_display: map-get-z($grid,debug,display);
        $debug_bg:      map-get-z($grid,debug,background);
        $debug_name:    map-get-z($grid,debug,name);

        $column_prefix: #{'.' + $column_class + '--'};
        $push_prefix: #{'.' + $push_class + '--'};
        $bp_suffix: #{'--' + $suffix };

        @if( $suffix != null and $breakpoint != null){

            @include at-breakpoint($breakpoint){

                @include grid_columns($column_prefix, $bp_suffix, $breakpoint, $columns); //new!
                
                @include grid_push($push_prefix, $bp_suffix, $breakpoint, $columns); //new!

                @include grid_wrapper($gutter);
                @include grid_margins($gutter);

                @include grid_omega($column_prefix, $bp_suffix);
               
                @if( $debug_display = true ){ @include debug_grid($debug_name,$debug_bg) }
            }

        } @else {
            @include grid_columns($column_prefix, null, null, $columns); //new!
            @include grid_push($push_prefix, null, null, $columns); //new!

            @include grid_wrapper($gutter);
            @include grid_margins($gutter);
            @include grid_omega($column_prefix, null );
            @if( $debug_display = true ){ @include debug_grid($debug_name,$debug_bg)  }
        }
    }

    
}