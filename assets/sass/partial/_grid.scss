/**
 * Flexbones Grid System
 * 
 * Version 1.1
 * Author: Rory Ashford
 */


/**
 * Clearfix mixin
 *
 * Used to clea1r the floats within each grid
 */
@mixin clearfix() {
    *zoom:1;
    &:before, &:after {
        content:"";
        display:table;
    }
    &:after { clear:both; }
}


/**
 *Column Width
 * 
 * Works out the percent width of columns
 * (gutters can be any unit but columns are always percent bases)
 */
@function column_width($number_of_columns,$total_columns) {
    
    $single_col_width: 100 / $total_columns * 1%;
    @return $single_col_width * $number_of_columns;

}


/**
 * At Breakpoint
 * 
 * a mixin for outputting inline media queries
 * Just supply a Sass list as an argument with a min/max
 * If there are no min and max values supplied then it 
 * doesnt ouput a media query
 */
@mixin at-breakpoint($min,$max:null){
    @if($max == null){
        @media (min-width: $min){
            @content;
        }
    } @elseif($min == null AND $max == null) {
        @content;
    } @else{
         @media (min-width: $min) and (max-width: $max){
            @content;
        }
    }
}


/**
 * Span Columns
 * Used to set grids semantically from within 
 * the stylesheet with no additional HTML markup
 */
@mixin span-columns($columns, $total_columns){
    width: column_width($columns,$total_columns);
    padding-left: $gutter_width;
}


/**
 * Grid wrapper
 *
 * This needs revising and combining with .wrapper
 */
@mixin grid_wrapper($gutter){
    .grid{
        @include clearfix();
        margin-left: -$gutter;
    }
}


/**
 * Grid with no gutters
 */
@mixin grid_wrapper_full(){
    .grid--full{
        margin-left: 0;

        > [class^="#{$column_class}"]{
            padding-left: 0;
        }
    }
}


/**
 * Grid Margins
 * 
 * Float all items beginning with the grid prefix
 * e.g. 'span--'
 */
@mixin grid_margins($gutter,$prefix){
    [class^="#{$prefix}"]{
        position: relative;
        float: left;
        padding-left: $gutter;
    }   
}


/**
 * Grid Columns
 * 
 * Set the grid column widths based on the number of 
 * columns divided by the total number of columns.
 */
@mixin grid_columns($prefix: null, $suffix: null, $breakpoint: null, $columns: null){

    @for $i from 1 through $columns{
        #{$prefix}#{$i}-#{$columns}#{$suffix}{
            width: column_width($i,$columns);
        }
    }
}


/**
 * Push Class
 *
 * Set the push classes that will incrementally indent
 * the column by a maximum number of total-columns -1
 */
@mixin grid_push($prefix: null, $suffix: null, $breakpoint: null, $columns: null){

    @for $i from 1 through $columns - 1{
        #{$prefix}#{$i}-#{$columns}#{$suffix}{
            width: column_width($i,$columns);
        }
    }
}


/**
* Omega class
*
* An omega declaration that is breakpoint specific
* Basically it floats an element to the right taking
* it out of order potentially.
*/
@mixin grid_omega($prefix: null, $suffix: null){
    #{$prefix}omega#{$suffix} {
        float: right;
    }
}

   
/**
 * Debug 
 * 
 * Outputs the current breakpoint name to quickly debug 
 * each breakpoint.
 */
@mixin grid_debug($breakpoint_name,$debug_bg: #000){
    body:after{
        position: fixed;
        display: block;
        bottom: 10px;
        right: 10px;
        padding: 5px 20px;
        font-size: 14px;
        font-weight: bold;
        color: white;
        background: $debug_bg;
        content: "#{$breakpoint_name}";
    }
}


/**
 * Prepare Grid
 *
 * Pulls the whole thing together ready for output
 * kept seperate from grid_generate as it is DRYer 
 * this way.
 */

@mixin grid_generate($grid_args){

    // This solution will ONLY work with libsass and 
    // sass-list-maps polyfill, will add code for 
    // sass3.3+ support later

    $grids: map-get-z($grid_args, grids);

    $column_name: map-get-z($grid_args, config, columnclass);
    $column_prefix: #{'.' + $column_name};
    $push_prefix: #{'.' + map-get-z($grid_args, config, pushclass)};

    $debug_display: map-get-z($grid_args, config, debug);

    @each $grid in $grids{
        $columns:       map-get(value($grid),columns);
        $suffix:        map-get(value($grid),suffix);
        $breakpoint:    map-get(value($grid),breakpoint);
        $gutter:        map-get(value($grid),gutter);

        // Debug info
        $debug_bg:      map-get-z(value($grid),debug,background);
        $debug_name:    map-get-z(value($grid),debug,name);

        // Include the necessary mixins to generate the grids

        @include at-breakpoint($breakpoint){
            @include grid_wrapper($gutter);
            @include grid_margins($gutter,$column_name);
            @include grid_columns($column_prefix, $suffix, $breakpoint, $columns);
            @include grid_push($push_prefix, $suffix, $breakpoint, $columns);
            @include grid_omega($column_prefix, $suffix);
            @if( $debug_display = true ){ 
                @include grid_debug($debug_name,$debug_bg) 
            }    
        }    
    }
}