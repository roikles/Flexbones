// _flexbones_grid.scss
// Dynamically create responsive grids

// calculate the percentage width of each column based on the total columns

@function fb_grid_base_size($total_columns){
	
	// Base size is the core percentage. 
	// E.g. 12 col grid would be 1/12 = 8.333333333 (which would be the percentage width)

	@return 1 / $total_columns;
}


// Returns the calculated with of a column based on the total number of columns and the desired column width

@function calc_column_width($total_columns) {
	@return fb_grid_base_size($total_columns) * $column_width;
}


// Returns the calculated gutter width

@function calc_gutter_width($total_columns) {
	@return fb_grid_base_size($total_columns) * $gutter_width;
}


// Calculate the push margins

@function calc_push($columns, $total_columns){
	// push math 
	@return ($columns * calc_column_width($total_columns)) + (($columns - 1) * calc_gutter_width($total_columns));
}


// At-Breakpoint is a shortcut mixin for outputting media queries
// Just supply a Sass list as an argument with a min/max

@mixin at-breakpoint($min,$max:null){
	@if($max == null){
		@media (min-width: $min){
			@content;
		}
	} @else {	
		@media (min-width: $min ) and (max-width: $max ){
			@content;
		}
	}
}


// Drop a grid in on the fly

@mixin span-columns($columns, $total_columns){
	width: ($columns * calc_column_width($total_columns)) + (($columns - 1) * calc_gutter_width($total_columns));
}


// Drop a push on the fly

@mixin push($columns, $total_columns){
	margin-left: calc_push($columns, $total_columns);
}


// Calculate and output a set of column widths
// Based on column numbers and mediaquery breakpoints

@mixin set_columns($class,$columns,$total_columns,$bp_name:null){

	$g_class: null;

	@if($bp_name == null){
		$g_class: #{$class}__#{$columns}-#{$total_columns};
	} @else {
		$g_class: #{$class}__#{$columns}-#{$total_columns}--#{$bp_name};
	}

	// CSS Class

	#{$g_class}{
		@if($columns == 1){	
			width: calc_column_width($total_columns);
		} @else {
			width: ($columns * calc_column_width($total_columns)) + (($columns - 1) * calc_gutter_width($total_columns));
		}
	}

}



// Push it real good

@mixin set_push($columns,$total_columns,$bp_name:null){

	$base_class: '.grid__push';
	$push_class: null;

	@if($bp_name == null){
		$push_class: #{$base_class}__#{$columns}-#{$total_columns};
	} @else {
		$push_class: #{$base_class}__#{$columns}-#{$total_columns}--#{$bp_name};
	}

	// CSS Class

	#{$push_class}{
		left: calc_push($columns, $total_columns);
	}
}


// Creates a wrapper that handles the negative margins on the grid at different breakpoints.

@mixin grid-wrapper($total_columns, $mq: null){
	
	.grid{
		@extend .clear;

		@if($mq == null){
		
			padding-left: -#{calc_gutter_width($total_columns)};

			> #{$grid_class}{
				float: left;
				margin-left: #{calc_gutter_width($total_columns)}; 
			}

		} @else {
		
			@include at-breakpoint($mq){ 
		
				margin-left: -#{calc_gutter_width($total_columns)};
				
				> #{$grid_class}{
					float: left;
					margin-left: #{calc_gutter_width($total_columns)}; 
				}
			}
		}
	}
}


// Generate the grid css output

@mixin grid($prefix,$total_columns,$bp_name:null,$breakpoint:null){

	@if($breakpoint == null){

		@include grid-wrapper($total_columns, null);

		@for $i from 1 through $total_columns {
			@include set_columns($prefix,$i,$total_columns,null);
			
			@if $i != $total_columns{
				@include set_push($i,$total_columns,null);
			}
			
		}
		
	} @else {
		
		@include at-breakpoint( $breakpoint ){
	
			@include grid-wrapper($total_columns);

			@for $i from 1 through $total_columns {
				@include set_columns($prefix,$i,$total_columns,$bp_name);
				@if $i != $total_columns{
					@include set_push($i,$total_columns,$bp_name);
				}
			}

		}

	}	

}